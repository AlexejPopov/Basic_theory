#include <iostream>
#include <locale.h>
#include <stdlib.h>

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    /* double C = 3.14;         // корректно
    double D = 3.14F;           // некорректно
    double E = 0.0;             // 0.0 литерал типа double
    double F = 3.0;             // 3.0 литерал типа double
    float G = 0.0F;             // 0.0F литерал типа float

    Американская форма записи, нерекомендуемая!
    double H = 3.;              // 3. литерал типа double
    double I = 0.;              // 0. литерал типа double
    double K = .0;              // .0 литерал типа double */

    /* ОПЕРАТОРЫ:
    Это конструкции языка программирования, позволяющие производить различные действия над данными, приводящии к определённому результату. Например:
    1. мат.бинарные операторы: +, -, *, /, % (остаток от деления или деление по модулю). Эти операторы взаимодействуют с двумя объектами, которые нызываются ОПЕРАНДЫ.
    2. мат.унарный оператор, взаимодействующий лишь с одним объектом (с одной переменной, с одним значением), например -3. Унарный минус образует отрицательное значение.

    (!) В переменную не обязательно вкладывать отрицательное значение, т.к. его можно потом поменять поставив минус при выводе на экран!
    cout<<-A; (вывод на экран значения переменной с противоположным знаком). Сама переменная А при этом никаких изменений не понесёт. */

    int A = 5, B = -3;
    A = A + 10;                                         // операция присваивания
    cout << "Переменная А: " << A << endl;
    A++;                                                // (А = А + 1) форма А++ называется инкремент, а А-- соответственно декремент
    cout << A << endl;                                  // операции с переменными лучше делать отдельно от команды вывода на экран cout
    A--;
    cout << A << endl;

    /* Операторы инкремент и декремент имеют 2 формы записи, обе унарные:
    A++ постфиксная форма записи
    ++А префиксная форма записи
    Между ними есть разница. Если они используются отдельно, как выше, то разницы нет. Разберем ниже. */
    system("cls");

    /* У всех операторов С++ есть иерархия, словно в математике, где первым выполняется умножение, а потом сложение.

    Иерархия в С++ :
    Операторы () всегда имеют приоритет.
    Арифметические операторы идут от сильного к слабому: * / % + - (слева направо).
    Операторы ввода и вывода на экран: >> и <<.
    Операторы сравнения: <, <=, >, >=, != (неравно), == (равно).
    (!) В третьем уроке есть отличная таблица иерархии операторов слева направо и сверху вниз.
    (!) Операции присваивания (=) и ввода/вывода на экран (>>, <<) имеют больший приоритет чем (++) и (--). */

    A = 10;
    // cout << "Переменная А: " << A << endl;
    // cout << "Выражение А++ " << ++A << endl;
    /* Если мы поставим (++) после А, то А сперва выведется на экран, а потом произойдет действие (++), т.к. у оператора '<<' выше приоритет. Но если мы поставим (++)
    перед А, то сперва сработает инкремент и потом выведется значение переменной А на экран, т.к. оператору '<<' нужно значение, а перед значением стоит (++), след, ему
    волей-неволей придется выполнить (++) и потом полученное значение вывести на экран. */

    B = A++;                                  // постфиксная форма записи инкремента. Сначала в В присвоется текущее значение А, потом САМО значение А будет увел. на 1!
    cout << "Переменная А: " << A << endl;
    cout << "Переменная B: " << B << "\n" << endl;

    // Поменяем форму записи:
    A = 10;
    B = ++A;                                  // префиксная форма записи инкремента. Сначала значение А будет увел. на 1, а потом новое значение А будет присвоено В. 
    cout << "Переменная А: " << A << endl;    // (!) переменная В будет равна 11, но и переменная А тоже будет равна 11, т.к. с А произошло действие инкремента
    cout << "Переменная В: " << B << endl;

    /* Символ '%' (остаток от деления или деление по модулю). Написав например 17%3, я выполню деление на ближайшее число кратное трем, а это 15. А разница между этим
    кратным на три числом и исходным числом это 2. След, 2 это остаток от деления. Если одно число делится на другое число цельно, то остаток 0. Также при делении любо-
    го числа на два полученный остаток скажет нам четное ли делимое или нет.
    (!) Четное число делится на 2 без остатка, а нечетное даст в остатке 1. */
    cout << "A%4=" << A % 4 << endl;


    // Комбинированные арифметические операторы это некоторые формы упрощенной записи следующих вычислений:
    A = A + 10;         // можно заисать как A += 10;
    A = A - 10;         // A -= 10;
    A = A * B;          // A *= B;
    A = A / B;          // A /= B;
    B = B % A;          // B %= A;
    cout << A << endl;
    cout << B << endl;  // в В запишется остаток от деления В на А, а А не изменится т.к. над А не было никаких присваивающих операций
}